/*
 * Copyright (c) 2015. Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

plugins {
  id 'nebula.netflixoss' version '2.2.5'
}

ext {
  githubProjectName = 'servo'
}

subprojects {
  apply plugin: 'nebula.netflixoss'
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'pmd'

  group = "com.netflix.${githubProjectName}"

  repositories {
    jcenter()
  }

  sourceCompatibility = '1.6'
  targetCompatibility = '1.6'

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }

  test {
    useTestNG()
    options.excludeGroups = ['aws']
    testLogging.showStandardStreams = true
  }

  task(testWithCloud, type: Test) {
    useTestNG()
    group = 'verification'
    options.excludeGroups = [] as Set
  }

  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.code.findbugs:annotations:2.0.0'
    testCompile 'org.testng:testng:6.1.1'
    testRuntime 'org.slf4j:slf4j-log4j12:1.7.7'
    testRuntime 'log4j:log4j:1.2.17'
  }

  checkstyle {
    ignoreFailures = false 
    configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [sourceSets.main]
  }

  tasks.withType(Checkstyle) {
    exclude "**/jsr166e/**"
  }

  findbugs {
    ignoreFailures = false 
  }

  tasks.withType(FindBugs) {
    findbugs.toolVersion "3.0.0"
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  pmd {
    ignoreFailures = false
    ruleSets = []
    ruleSetFiles = rootProject.files("codequality/pmd.xml")
    sourceSets = [sourceSets.main]
  }

  tasks.withType(Pmd) {
    exclude "**/jsr166e/**"
  }

  javadoc {
    options.addStringOption("sourcepath", "")
  }
}

