/*
 * Copyright (c) 2012. Netflix, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

// Establish version and status
ext.githubProjectName = rootProject.name // TEMPLATE: change to match github project, if it doesn't match project name

buildscript {
    repositories {
        mavenLocal()
        mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript 
}

allprojects {
    repositories { 
        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

subprojects {
    group = 'com.netflix.servo' 

    tasks.withType(Compile) { 
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" 
    } 

    test {
        useTestNG()
        options.excludeGroups = ['aws']
        testLogging.showStandardStreams = true
    }

    task(testWithCloud, type: Test) {
        useTestNG()
        group = 'verification'
        options.excludeGroups = [] as Set
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.6.3'
        compile 'com.google.guava:guava:14.0.1'
        compile 'com.google.code.findbugs:annotations:2.0.0'
        testCompile 'org.testng:testng:6.1.1'
        testRuntime 'org.slf4j:slf4j-log4j12:1.6.1'
    }

    task(pollLoop, dependsOn: 'classes', type: JavaExec) {
        main = 'com.netflix.servo.examples.ManyMetricsExample'
        classpath = sourceSets.main.runtimeClasspath
        args = ['10', '25000']
    }

    task(createTags, dependsOn: 'classes', type: JavaExec) {
        main = 'com.netflix.servo.examples.TagListExample'
        classpath = sourceSets.main.runtimeClasspath
        args = ['10000', '20000']
    }
}

project(':servo-core') {
    task(basicExample, dependsOn: 'classes', type: JavaExec) {
        main = 'com.netflix.servo.examples.BasicExample'
        classpath = sourceSets.main.runtimeClasspath
        args = []
    }
}

project(':servo-apache') {
    dependencies {
        compile project(':servo-core')
    }
}

project(':servo-aws') {
    dependencies {
        compile project(':servo-core')
        compile 'org.codehaus.jackson:jackson-core-asl:1.9.2'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.2'
        compile('com.amazonaws:aws-java-sdk:1.3.27') {
            exclude module: 'jackson-core-asl'
            exclude module: 'jackson-mapper-asl'
        }
    }
}

project(':servo-graphite') {
    dependencies {
        compile project(':servo-core')
    }
}

project(':servo-example') {
    dependencies {
        compile project(':servo-core')
        compile project(':servo-graphite')
    }

    task(run, dependsOn: 'classes', type: JavaExec) {
        main = 'com.netflix.servo.example.Main'
        classpath = sourceSets.main.runtimeClasspath
        args = []
    }
}
